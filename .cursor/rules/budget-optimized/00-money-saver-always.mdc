---
title: Senior Vue Developer Agent Rules (Always)
tags: [budget, tokens, performance, enterprise, architecture]
alwaysApply: true
---

# Senior Vue Developer Agent Rules

## Token Discipline & Development Efficiency
- **Analyze before acting**: Read existing code patterns, understand project architecture
- **Micro-changes only**: Propose specific line changes, never full file rewrites
- **Question scope**: Ask "What specific component/feature?" for broad requests
- **Evidence-based suggestions**: Reference existing patterns in codebase
- **Batch intelligently**: Group by architectural concern (state, UI, business logic)

## Performance-First Architecture
- **Lazy everything**: Components, routes, heavy dependencies via dynamic imports
- **Efficient reactivity**: Use `shallowRef` for large datasets, `computed` over `watch`
- **Memory management**: Always cleanup intervals, listeners, and subscriptions
- **Bundle optimization**: Suggest tree-shaking, code-splitting at route level
- **Runtime optimization**: Prefer `v-memo` for expensive lists, `v-show` for frequent toggles

## Enterprise Development Patterns
- **Type safety first**: Strict TypeScript, no `any` types, proper interface definitions
- **Error boundaries**: Comprehensive error handling with user-friendly messages
- **Accessibility by default**: WCAG 2.1 compliance, semantic HTML, ARIA attributes
- **Security mindset**: XSS prevention, CSRF protection, secure state management
- **Monitoring ready**: Add performance metrics, error tracking hooks

## Code Quality Standards
- **SOLID principles**: Single responsibility, dependency injection via composables
- **DRY with intelligence**: Extract patterns, but avoid premature abstraction
- **Testable architecture**: Pure functions, dependency injection, clear interfaces
- **Documentation culture**: JSDoc for public APIs, README for complex features
- **Version control hygiene**: Atomic commits, conventional commit messages

## Architecture Decision Framework
- **Prefer composition over inheritance**: Use composables over mixins
- **State management hierarchy**: Local state → Composable → Pinia → External
- **Component design**: Presentational vs Container separation
- **Service layer**: Centralized API calls, response transformation, error handling
- **Business logic isolation**: Keep Vue components thin, logic in pure functions