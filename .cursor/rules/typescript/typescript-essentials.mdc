---
title: TypeScript Essentials for Vue 3
tags: [typescript, practical, code-generation]
globs: ["src/**/*.ts", "src/**/*.vue", "*.config.ts"]
---

# TypeScript Essentials for Vue 3

## Component Props & Emits
```vue
<script setup lang="ts">
interface Props {
  title: string
  count?: number
  items: string[]
  user?: User
}

interface Emits {
  (e: 'update', value: string): void
  (e: 'select', item: Item): void
  (e: 'close'): void
}

const props = withDefaults(defineProps<Props>(), {
  count: 0
})

const emit = defineEmits<Emits>()
</script>
```

## Reactive State Types
```typescript
// Primitives
const count = ref<number>(0)
const message = ref<string>('')
const isVisible = ref<boolean>(true)
const data = ref<User | null>(null)

// Objects
interface FormData {
  email: string
  password: string
}
const form = reactive<FormData>({ email: '', password: '' })

// Arrays
const users = ref<User[]>([])
const selectedIds = ref<number[]>([])
```

## API & Async Patterns
```typescript
// API Response Types
interface ApiResponse<T> {
  data: T
  message: string
  success: boolean
}

// Async function with proper typing
const fetchUser = async (id: number): Promise<User | null> => {
  try {
    const response = await fetch(`/api/users/${id}`)
    const result: ApiResponse<User> = await response.json()
    return result.data
  } catch (error) {
    console.error('Failed to fetch user:', error)
    return null
  }
}

// Loading states
const loading = ref<boolean>(false)
const error = ref<string | null>(null)

const loadData = async (): Promise<void> => {
  loading.value = true
  error.value = null
  try {
    const data = await fetchData()
    // Handle data
  } catch (err) {
    error.value = err instanceof Error ? err.message : 'Unknown error'
  } finally {
    loading.value = false
  }
}
```

## Form Validation Types
```typescript
interface FormData {
  email: string
  password: string
  confirmPassword: string
}

interface FormErrors {
  email?: string
  password?: string
  confirmPassword?: string
}

const form = reactive<FormData>({
  email: '',
  password: '',
  confirmPassword: ''
})

const errors = reactive<FormErrors>({})

// Validation functions
const validateEmail = (email: string): string | undefined => {
  if (!email) return 'Email is required'
  if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) return 'Invalid email'
  return undefined
}

// Computed validation
const isFormValid = computed((): boolean => {
  return !Object.values(errors).some(error => error) && 
         Object.values(form).every(value => value)
})
```

## Router Integration
```typescript
import { useRouter, useRoute } from 'vue-router'

const router = useRouter()
const route = useRoute()

// Type-safe route parameters
const userId = computed((): number | null => {
  const id = route.params.id
  return typeof id === 'string' ? parseInt(id, 10) : null
})

// Navigation
const navigateToUser = (id: number): void => {
  router.push({ name: 'user-detail', params: { id: id.toString() } })
}

// Query parameters
const searchQuery = computed((): string => {
  const query = route.query.search
  return typeof query === 'string' ? query : ''
})
```

## Event Handlers
```typescript
// Mouse events
const handleClick = (event: MouseEvent): void => {
  console.log('Clicked at:', event.clientX, event.clientY)
}

// Input events
const handleInput = (event: Event): void => {
  const target = event.target as HTMLInputElement
  console.log('Input value:', target.value)
}

// Custom events with payload
const handleUserSelect = (user: User): void => {
  emit('user-selected', user)
}

// Async event handlers
const handleSave = async (event: MouseEvent): Promise<void> => {
  event.preventDefault()
  try {
    await saveData()
    console.log('Saved successfully')
  } catch (error) {
    console.error('Save failed:', error)
  }
}
```

## Composable Types
```typescript
// Generic composable
export function useApi<T>(url: string) {
  const data = ref<T | null>(null)
  const loading = ref<boolean>(false)
  const error = ref<string | null>(null)
  
  const execute = async (): Promise<void> => {
    loading.value = true
    error.value = null
    try {
      const response = await fetch(url)
      data.value = await response.json()
    } catch (err) {
      error.value = err instanceof Error ? err.message : 'Unknown error'
    } finally {
      loading.value = false
    }
  }
  
  return {
    data: readonly(data),
    loading: readonly(loading),
    error: readonly(error),
    execute
  }
}

// Usage
const { data, loading, error, execute } = useApi<User[]>('/api/users')
```

## Common Interface Patterns
```typescript
// Base entity
interface BaseEntity {
  id: string | number
  createdAt: Date
  updatedAt: Date
}

// User entity
interface User extends BaseEntity {
  name: string
  email: string
  role: 'admin' | 'user' | 'guest'
  avatar?: string
}

// API pagination
interface PaginatedResponse<T> {
  data: T[]
  total: number
  page: number
  limit: number
  pages: number
}

// Form field
interface FormField<T> {
  value: T
  error: string | null
  touched: boolean
}
```

## Environment Variables
```typescript
// env.d.ts
interface ImportMetaEnv {
  readonly VITE_API_URL: string
  readonly VITE_APP_TITLE: string
  readonly VITE_DEBUG: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}

// Usage
const apiUrl: string = import.meta.env.VITE_API_URL
const isDebug: boolean = import.meta.env.VITE_DEBUG === 'true'
```

## Type Guards
```typescript
// Simple type guards
const isString = (value: unknown): value is string => {
  return typeof value === 'string'
}

const isNumber = (value: unknown): value is number => {
  return typeof value === 'number' && !isNaN(value)
}

const isUser = (value: unknown): value is User => {
  return (
    typeof value === 'object' &&
    value !== null &&
    'id' in value &&
    'name' in value &&
    'email' in value
  )
}

// Usage
const processData = (data: unknown): void => {
  if (isUser(data)) {
    console.log(data.name) // TypeScript knows it's a User
  }
}
```

## Quick Reference

### Basic Types
```typescript
// Primitives
string, number, boolean, null, undefined

// Arrays
string[], number[], User[]
Array<string>, Array<User>

// Objects
{ name: string; age: number }
Record<string, any>

// Optional
string | undefined
string?

// Union types
string | number
'admin' | 'user' | 'guest'
```

### Utility Types
```typescript
// Pick specific properties
type UserSummary = Pick<User, 'id' | 'name'>

// Omit properties
type CreateUser = Omit<User, 'id' | 'createdAt'>

// Make all optional
type PartialUser = Partial<User>

// Make all required
type RequiredUser = Required<User>

// Extract from union
type AdminRole = Extract<Role, 'admin'>
```