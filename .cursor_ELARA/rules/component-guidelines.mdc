---
description: Vue 3 + TypeScript component guidelines for Artemis Panel
alwaysApply: false
---
# Component Guidelines

## Component Structure Order

Use the Composition API with TypeScript for all Vue components. Organize the `<script setup>` section in this specific order:

1. **External imports** (libraries like pinia)
2. **Internal imports** (types, utils, services)  
3. **Props** with proper TypeScript interfaces
4. **Emits** with TypeScript
5. **Composables** (auto-imported from `/composables`)
6. **Plugin instances** (auto-injected like `$wait`, `$toast`)
7. **Stores** with reactivity using `storeToRefs`
8. **Reactive state** (`ref`, `reactive`)
9. **Computed properties**
10. **Watchers**
11. **Methods** 
12. **Lifecycle hooks**
13. **Expose** for testing/parent access

## Available Composables (Auto-imported)

### Core Composables from `/composables`
```typescript
// Color utilities
const { getUserColor, getRoleColor, getThemeColor } = useColor()

// RBAC (Role-Based Access Control)
const { hasPermission } = useRBAC()
// Usage: hasPermission('en.user.create.*', '100') // deepCode for all langs

// Validation rules
const validation = useValidation(maxLength) // Pass parameter if needed
// Available: required, maxLength(), minLength(), email, url, phone, username, promotion_code

// Data conversion
const { convertToDisplayFormat, convertFromDisplayFormat } = useConverter()

// Form field utilities
const { getFieldOptions, getFieldType } = useFields()

// Language utilities  
const { getLanguageOptions, getCurrentLanguage } = useLanguages()

// Real-time updates
const { initPusher, subscribeTo } = usePusher()

// Configuration
const { getConfig, updateConfig } = useConfig()

// Status utilities
const { getCaseStatuses, getStatusColor } = useCaseStatuses()

// Filtering utilities
const { applyFilters, resetFilters } = useFilter()
```

## Available Plugins & Global Properties

### `$wait` Plugin - Loading State Management
```typescript
// In template
<v-btn :loading="$wait.is('save_user')">Save</v-btn>

// In script
const $wait = inject('$wait')

const saveData = async () => {
  $wait.start('save_user')
  try {
    await api.call()
  } finally {
    $wait.end('save_user') // Always end in finally
  }
}
```

### `$toast` Plugin - Notifications
```typescript
const $toast = inject('$toast')

// Success notifications
$toast.success(t('user.saved_successfully'))

// Error handling with automatic parsing
$toast.error(error) // Automatically parses API errors

// Other variants
$toast.info('Information message')
$toast.warning('Warning message')
$toast.danger('Danger message')
```

## Global Components (Auto-registered)

### Icon Component (Iconify)
```vue
<template>
  <!-- Available icon sets: icon-park-outline, circle-flags, logos, skill-icons, vscode-icons -->
  <Icon icon="icon-park-outline:user" />
  <Icon icon="circle-flags:us" />
  <Icon icon="logos:vue" />
  <Icon icon="skill-icons:typescript" />
  <Icon icon="vscode-icons:file-type-pdf2" />
</template>
```

### Form Components
```vue
<template>
  <!-- Date picker -->
  <Datepicker v-model="date" :locale="currentLocale" />
  
  <!-- Rich text editor -->
  <Editor v-model="content" :toolbar="editorToolbar" />
  
  <!-- Tree view -->
  <TreeView :nodes="treeData" @node-select="handleNodeSelect" />
  
  <!-- Image cropper -->
  <Cropper :src="imageSrc" @crop="handleCrop" />
  
  <!-- Code editor -->
  <MonacoEditor v-model="code" language="typescript" />
  
  <!-- Loading skeleton -->
  <Skeletor height="200px" />
  
  <!-- Infinite loading -->
  <InfiniteLoading @infinite="loadMore" />
</template>
```

## Constants and Utilities

### Using Constants from `/utils/constants`
```typescript
import { 
  USER_ROLES,
  LEADSTATUSENUMS,
  CASESTATUSENUMS,
  FIELD_TYPES,
  COUNTRIES,
  ROUTES_NAME,
  ACTIONS,
  STATUS_TYPES
} from '@/utils/constants'

// Usage in component
const defaultRole = ref(USER_ROLES.USER)
const leadStatus = ref(LEADSTATUSENUMS.NEW)
const countries = computed(() => COUNTRIES)
```

### Error Handling with `parseErrorMessage`
```typescript
import { parseErrorMessage } from '@/utils/errorParser'

const handleError = (error: any) => {
  const userFriendlyMessage = parseErrorMessage(error)
  $toast.error(userFriendlyMessage)
}
```

### Currency Formatting
```typescript
import { formatCurrency } from '@/utils/formatCurrency'

const displayPrice = computed(() => {
  return formatCurrency(price.value, currency.value)
})
```

## Service Integration

### Standard Service Call Pattern
```typescript
function fetchData() {
  $wait.start("fetch_operation_name");
  ServiceName.methodName(params)
    .then((result: typeof Response) => {
      // Process result.data or result
      dataRef.value = result.data;
      if (result.pagination) pagination.value = result.pagination;
    })
    .catch((error) => {
      // Error handling is automatic via $toast
    })
    .finally(() => $wait.end("fetch_operation_name"));
}
```

### When to Use req_source
The `req_source` parameter is used for **RBAC permission checking** and is typically required for:

#### Form/Edit Operations
```typescript
// Getting data for forms - req_source determines what fields are accessible
LanguageService.getLanguages({
  req_source: isEdit.value ? "user.update.*" : "user.create.*"
})

// Getting roles/permissions for forms
RoleService.getRoles({
  req_source: isEdit.value ? "staff.update.*" : "staff.create.*"
})
```

#### Filter Operations
```typescript
// Getting filter options based on permissions
UserService.getUsers({
  user_type: ROLE_TYPES.CUSTOMER_PARTNER,
  req_source: "lead.filter.*"
})
```

#### NOT Required for:
- List operations: `UserService.getUsers({ page: 1, q: "search" })`
- Report operations: `ReportService.getDashboardReports()`
- Simple data fetching: `CategoryService.getCategories({ limit: 50 })`
- Profile operations: `UserService.getProfile()`

### Complex Data Processing
```typescript
// Nested data processing example
CategoryService.getTreeCategories({ type: STATUS_TYPES.SERVICECATEGORY })
  .then((result: typeof Response) => {
    const processTree = (categories: any[]) => {
      return categories.map(category => ({
        ...category,
        children: category.children ? processTree(category.children) : []
      }));
    };
    treeCategories.value = processTree(result.data);
  })
```

### Error Handling
```typescript
// Automatic error handling via $toast
ServiceName.methodName(params)
  .then((result) => {
    // Success handling
  })
  // .catch() not needed - $toast handles errors automatically
  .finally(() => $wait.end("operation_name"));

// Manual error handling when needed
ServiceName.methodName(params)
  .then((result) => {
    // Success
  })
  .catch((error) => {
    // Custom error handling
    $toast.error("Custom error message");
  })
  .finally(() => $wait.end("operation_name"));
```

## Component Props & Emits

### Props Interface Pattern
```typescript
interface Props {
  modelValue?: User | null
  loading?: boolean
  readonly?: boolean
  size?: 'small' | 'medium' | 'large'
}

const props = withDefaults(defineProps<Props>(), {
  modelValue: null,
  loading: false,
  readonly: false,
  size: 'medium'
})
```

### Emits with TypeScript
```typescript
interface Emits {
  'update:modelValue': [value: User | null]
  'submit': [data: FormData]
  'cancel': []
}

const emit = defineEmits<Emits>()

// Usage
emit('update:modelValue', newUser)
emit('submit', formData)
emit('cancel')
```

## Reactive State Management

### Basic Reactive State
```typescript
// Simple refs
const isLoading = ref(false)
const searchQuery = ref('')
const selectedItems = ref<User[]>([])

// Reactive objects
const form = reactive({
  username: '',
  email: '',
  password: ''
})

// With proper typing
const user = ref<User | null>(null)
const users = ref<User[]>([])
```

### Store Integration
```typescript
import { useAuthStore } from '@/stores/auth'
import { storeToRefs } from 'pinia'

const authStore = useAuthStore()
const { user, isAuthenticated } = storeToRefs(authStore)

// Methods
const login = () => authStore.login(credentials)
const logout = () => authStore.logout()
```

## Computed Properties

### Basic Computed
```typescript
const fullName = computed(() => {
  return `${user.value?.firstName} ${user.value?.lastName}`
})

const filteredItems = computed(() => {
  return items.value.filter(item => 
    item.name.toLowerCase().includes(searchQuery.value.toLowerCase())
  )
})
```

### Computed with Dependencies
```typescript
const formattedPrice = computed(() => {
  if (!price.value) return '0'
  return formatCurrency(price.value, currency.value)
})

const canEdit = computed(() => {
  return useRBAC()('user.update.*', '100') && !readonly.value
})
```

## Watchers

### Basic Watchers
```typescript
// Watch single ref
watch(searchQuery, (newQuery) => {
  fetchResults(newQuery)
})

// Watch multiple sources
watch([page, pageSize], ([newPage, newSize]) => {
  fetchData(newPage, newSize)
})

// Watch reactive object
watch(
  () => ({ ...form }),
  (newForm, oldForm) => {
    if (newForm.email !== oldForm.email) {
      validateEmail(newForm.email)
    }
  },
  { deep: true }
)
```

### Immediate and Deep Watchers
```typescript
watch(
  user,
  (newUser) => {
    if (newUser) {
      loadUserPreferences(newUser.id)
    }
  },
  { immediate: true }
)

watch(
  formData,
  (newData) => {
    saveToLocalStorage(newData)
  },
  { deep: true, debounce: 500 }
)
```

## Lifecycle Hooks

### Common Lifecycle Patterns
```typescript
onMounted(() => {
  // Initialize component
  fetchInitialData()
  setupEventListeners()
})

onBeforeUnmount(() => {
  // Cleanup
  removeEventListeners()
  clearIntervals()
})

onActivated(() => {
  // For keep-alive components
  refreshData()
})

onDeactivated(() => {
  // Cleanup when component is deactivated
  pauseOperations()
})
```

## Testing Support

### Component Exposure for Testing
```typescript
// Expose methods and refs for testing
defineExpose({
  fetchData,
  resetForm,
  isValid: computed(() => form.valid)
})
```

### Data Test Attributes
```vue
<template>
  <!-- Use data-test attributes for testing -->
  <v-btn 
    data-test="submit-button"
    :data-test-loading="isLoading"
    @click="handleSubmit"
  >
    Submit
  </v-btn>
</template>
```

Refer to `service-patterns.mdc` for service architecture details and `utilities.mdc` for additional utility functions.
