---
description: 
globs: 
alwaysApply: false
---
---
description: Structure and naming for Vue Router
globs: src/router/**/*.ts
alwaysApply: false
---
# Router Conventions

Declare all routes in `src/router/routes.ts`. Use dynamic imports to enable code splitting and name routes using `ROUTES_NAME` constants.

## File Naming in Routes
**CRITICAL**: All Vue component file names must start with a capital letter for proper import resolution in production builds.

✅ **Correct Examples:**
```typescript
{
  name: ROUTES_NAME.AUTH,
  path: "/auth",
  component: () => import("@/layouts/Auth.vue"),
  children: [
    {
      name: ROUTES_NAME.LOGIN,
      path: "login",
      component: () => import("@/views/Auth/Login.vue"),
    },
    {
      name: ROUTES_NAME.DASHBOARD,
      path: "dashboard", 
      component: () => import("@/views/Dashboard/Index.vue"),
    },
  ],
}
```

❌ **Incorrect Examples:**
```typescript
// Will fail in production builds
component: () => import("@/views/Auth/login.vue"),  // lowercase 'l'
component: () => import("@/views/Dashboard/index.vue"),  // lowercase 'i'
```

## Rules
- Always use PascalCase for Vue component files (`Index.vue`, `Login.vue`, `Dashboard.vue`)
- Dynamic imports must match the exact file name case
- Route guards should be implemented in the router and avoid duplication across views
- Production builds on Linux are case-sensitive, while development on Windows/Mac may not catch these errors