# Stage Workflow Rules

Purpose: Centralize how lead stage transitions are offered in UI dropdowns and ensure consistent behavior across views.

Key Concepts

- Default Stage Order: `new -> pending -> qualified -> sale_done -> done`
- Terminal Defaults: `spam`, `canceled` (exit-only states). After `sale_done`, ignore financial sub-steps in frontend.
- Extras: Stages without `default_stage`. Each extra belongs to the previous default stage by order (its parent).

Allowed Transitions

- From any non-terminal stage to `spam` or `canceled`.
- Default -> Default: forward only (e.g., `pending` -> `qualified`/`sale_done`/`done`).
- Default -> Extra: only extras between the current default and the next default (by stage `order`).
- Extra -> Extra: forward within the same interval (same parent default), based on `order`.
- Extra -> Default: back to its parent default, or forward to the next default.
- Done or any terminal (`spam`, `canceled`) cannot transition further in UI.

Implementation Notes

- Always show all stages in dropdowns; disable those not allowed. Highlight current stage and grey out terminal/done targets.
- Logic is implemented in `src/composables/useStageWorkflow.ts` with two helpers:
  - `buildStageItemsForSelect()` for `<VSelect>` items in forms/details.
  - `buildStageItemsForMenu()` for menu lists used in tables/boards.
- Both helpers enrich items with: `disabled`, `current`, `restricted`, and `colorClass` (via `useStageColor`).

Usage

```ts
import { useStageWorkflow } from '@/composables/useStageWorkflow';
const { buildStageItemsForSelect, buildStageItemsForMenu } = useStageWorkflow();

// Example for Info.vue
const items = buildStageItemsForSelect(pipelineStages, currentStageUuid, excludeUuids);

// Example for Table.vue
const items = buildStageItemsForMenu(pipelineStages, currentStageUuid);
```

Rationale

- Keeps rules aligned with the product diagram and admin settings mapping.
- Avoids drift between views; a single place to update when workflow changes.

